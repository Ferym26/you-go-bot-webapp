const helloMessage = `
	üöñ You Go ‚Äì –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–∏—Å–∫–µ –º–µ–∂–¥—É–≥–æ—Ä–æ–¥–Ω–∏—Ö –ø–æ–µ–∑–¥–æ–∫!

	üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ You Go!
	–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–µ–∑–¥–æ–∫ –º–µ–∂–¥—É –≥–æ—Ä–æ–¥–∞–º–∏ –∏ –ª–æ–∫–∞—Ü–∏—è–º–∏ –≤ –ì—Ä—É–∑–∏–∏.
	–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –≤–æ–¥–∏—Ç–µ–ª—è –∏–ª–∏ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ—ë –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª–∏–∫–æ–≤.

	‚ö† –ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å—Å—è, –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –∏ —É–ª—É—á—à–∞—Ç—å—Å—è.
	–ú—ã –±—É–¥–µ–º —Ä–∞–¥—ã –≤–∞—à–∏–º –æ—Ç–∑—ã–≤–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º!

	üéâ –°–µ–π—á–∞—Å —Å–µ—Ä–≤–∏—Å –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π!
	–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.

	–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:
`;

import { db } from '../utils/firebase.js';
import { collection, getDocs, deleteDoc, doc } from 'firebase/firestore';

export function start(bot) {
    bot.command('start', async (ctx) => {
        await ctx.reply(helloMessage, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üë§ –ü–∞—Å—Å–∞–∂–∏—Ä', callback_data: 'role_passenger' }],
                    [{ text: 'üöó –í–æ–¥–∏—Ç–µ–ª—å', callback_data: 'role_driver' }]
                ]
            }
        });
    });

    bot.callbackQuery('role_passenger', async (ctx) => {
		await ctx.answerCallbackQuery();

        await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
            reply_markup: {
                inline_keyboard: [
                    [{ text: "üÜï –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data: "create_transfer_request" }],
                    [{ text: "üìã –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∑–∞—è–≤–∫–∏", callback_data: "show_my_requests" }],
                    [{ text: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data: "delete_request" }],
                ]
            }
        });
    });



    bot.callbackQuery('delete_request', async (ctx) => {
		await ctx.answerCallbackQuery();

        const userId = ctx.from.id;
        const querySnapshot = await getDocs(collection(db, 'transfer-requests'));
        const userRequests = [];

        querySnapshot.forEach(doc => {
            const data = doc.data();
            if (data.userId === userId) {
                userRequests.push({ id: doc.id, ...data });
            }
        });

        if (userRequests.length === 0) {
            return ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.");
        }

        await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", {
            reply_markup: {
                inline_keyboard: userRequests.map(req => [
                    { text: `${req.from} ‚Üí ${req.to}, ${req.datetime}`, callback_data: `delete_${req.id}` }
                ])
            }
        });
    });

    bot.callbackQuery(/delete_(.+)/, async (ctx) => {
		await ctx.answerCallbackQuery();
		
        const requestId = ctx.match[1];
        await deleteDoc(doc(db, 'transfer-requests', requestId));
        await ctx.reply("‚úÖ –ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞!");
    });
}
