import { db } from '../utils/firebase.js';
import { doc, getDoc, setDoc } from 'firebase/firestore';

const profileTextGen = (data) => {
	return `
		<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤–æ–¥–∏—Ç–µ–ª—è</b>
		üë§ –ò–º—è: ${data.name}
		üß≠ –°—Ç–∞–∂: ${data.experience}
		üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: ${data.carDetails}
		üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: ${data.description}
		üê±üê∂ –î–æ–º–∞—à–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ: ${data.petsAllowed ? '–î–∞' : '–ù–µ—Ç'}
		üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phoneNumber}
	`;
};

const driverMenu = [
	[{ text: "–ú–æ–∏ –ø–æ–µ–∑–¥–∫–∏", web_app: { url: `${process.env.WEBAPP_URL}/driver-trip-list` } }],
	[{ text: "–°–æ–∑–¥–∞—Ç—å –ø–æ–µ–∑–¥–∫y", web_app: { url: `${process.env.WEBAPP_URL}/driver-create-trip` } }],
	[{ text: "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏", web_app: { url: `${process.env.WEBAPP_URL}/requests` } }],
	[{ text: "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø–æ–µ–∑–¥–∫–∏", web_app: { url: `${process.env.WEBAPP_URL}/trips` } }],
	[{ text: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data: "driver_view_profile" }],
	[{ text: "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data: "driver_edit_profile" }],
]

const sessions = new Map();

export function registerDriver(bot) {
	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ "–≤–æ–¥–∏—Ç–µ–ª—å"
	bot.callbackQuery('role_driver', async (ctx) => {
		await ctx.answerCallbackQuery();
		const userId = ctx.from.id;
		const driverRef = doc(db, 'drivers', String(userId));
		const driverDoc = await getDoc(driverRef);

		if (!driverDoc.exists()) {
			sessions.set(userId, { type: 'driver', step: 'driver_create_profile', data: {} });
			return ctx.reply("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—å. –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à—É –∞–Ω–∫–µ—Ç—É.", {
				reply_markup: {
					inline_keyboard: [
						[{ text: "–°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data: "driver_create_profile" }]
					]
				}
			});
		}

		await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
			reply_markup: {
				inline_keyboard: driverMenu,
			}
		});
	});

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
	bot.callbackQuery('driver_create_profile', async (ctx) => {
		await ctx.answerCallbackQuery();
		const userId = ctx.from.id;
		sessions.set(userId, { type: 'driver', step: 'driver_create_name', data: {} });
		await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:");
	});

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
	bot.callbackQuery('driver_edit_profile', async (ctx) => {
		await ctx.answerCallbackQuery();
		const userId = ctx.from.id;
		const driverRef = doc(db, 'drivers', String(userId));
		const driverDoc = await getDoc(driverRef);

		if (!driverDoc.exists()) {
			return ctx.reply("–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—å. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É.");
		}

		sessions.set(userId, { type: 'driver', step: 'driver_edit_profile', data: driverDoc.data() });
		await ctx.reply("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", {
			reply_markup: {
				inline_keyboard: [
					[{ text: "–ò–º—è", callback_data: "driver_edit_name" }],
					[{ text: "–°—Ç–∞–∂", callback_data: "driver_edit_experience" }],
					[{ text: "–ê–≤—Ç–æ–º–æ–±–∏–ª—å", callback_data: "driver_edit_car" }],
					[{ text: "–§–æ—Ç–æ –º–∞—à–∏–Ω—ã", callback_data: "driver_edit_car_photo" }],
					[{ text: "–û–ø–∏—Å–∞–Ω–∏–µ", callback_data: "driver_edit_description" }],
					[{ text: "–î–æ–º–∞—à–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ", callback_data: "driver_edit_pets_allowed" }],
					[{ text: "–¢–µ–ª–µ—Ñ–æ–Ω", callback_data: "driver_edit_phone_number" }],
				]
			}
		});
	});

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	bot.callbackQuery(/driver_edit_(.+)/, async (ctx) => {
		await ctx.answerCallbackQuery();
		const userId = ctx.from.id;
		const field = ctx.match[1]; // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å
		const session = sessions.get(userId);

		if (!session) {
			return ctx.reply("–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.");
		}

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∞–≥ –∏ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
		session.step = `driver_edit_${field}`;
		sessions.set(userId, session);

		// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
		let prompt = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:";
		if (field === "car_photo") {
			prompt = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –º–∞—à–∏–Ω—ã:";
		}
		await ctx.reply(prompt);
	});

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è, –∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
	bot.on("message", async (ctx) => {
		const userId = ctx.from.id;
		const session = sessions.get(userId);

		// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞—á–∞—Ç–∞ –∏–ª–∏ –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –≤–æ–¥–∏—Ç–µ–ª—é
		if (!session || session.type !== 'driver') {
			return;
		}

		try {
			switch (session.step) {
				// –õ–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
				case 'driver_create_name':
					session.data.name = ctx.message.text;
					session.step = 'driver_create_experience';
					sessions.set(userId, session);
					await ctx.reply("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Å—Ç–∞–∂ –≤–æ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5 –ª–µ—Ç):");
					break;

				case 'driver_create_experience':
					session.data.experience = ctx.message.text;
					session.step = 'driver_create_car';
					sessions.set(userId, session);
					await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É, –≥–æ–¥ –∏ —Ü–≤–µ—Ç –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, Toyota, 2018, —á–µ—Ä–Ω—ã–π):");
					break;

				case 'driver_create_car':
					session.data.carDetails = ctx.message.text;
					session.step = 'driver_create_photo';
					sessions.set(userId, session);
					await ctx.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–π –º–∞—à–∏–Ω—ã:");
					break;

				case 'driver_create_photo':
					if (!ctx.message.photo) {
						return ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –º–∞—à–∏–Ω—ã.");
					}
					session.data.carPhoto = ctx.message.photo.pop().file_id;
					session.step = 'driver_create_description';
					sessions.set(userId, session);
					await ctx.reply("–ù–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ —Å–µ–±–µ –∏ —É—Å–ª–æ–≤–∏—è—Ö –ø–µ—Ä–µ–≤–æ–∑–∫–∏:");
					break;

				case 'driver_create_description':
					session.data.description = ctx.message.text;
					session.step = 'driver_create_pets';
					sessions.set(userId, session);
					await ctx.reply("–ì–æ—Ç–æ–≤—ã –ª–∏ –≤—ã –ø–µ—Ä–µ–≤–æ–∑–∏—Ç—å –¥–æ–º–∞—à–Ω–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö?", {
						reply_markup: {
							inline_keyboard: [
								[
									{ text: "–î–∞", callback_data: "pets_yes" },
									{ text: "–ù–µ—Ç", callback_data: "pets_no" }
								]
							]
						}
					});
					break;

				case 'driver_create_phone':
					session.data.phoneNumber = ctx.message.text;
					await setDoc(doc(db, 'drivers', String(userId)), {
						...session.data,
						createdAt: new Date()
					});

					sessions.delete(userId);

					await ctx.reply("‚úÖ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ–µ–∑–¥–∫–∏.", {
						reply_markup: {
							inline_keyboard: driverMenu,
						}
					});
					break;

				// –õ–æ–≥–∏–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
				case 'driver_edit_name':
					session.data.name = ctx.message.text;
					await setDoc(doc(db, 'drivers', String(userId)), session.data, { merge: true });
					sessions.delete(userId);
					await ctx.reply("‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!");
					break;

				case 'driver_edit_car':
					session.data.carDetails = ctx.message.text;
					await setDoc(doc(db, 'drivers', String(userId)), session.data, { merge: true });
					sessions.delete(userId);
					await ctx.reply("‚úÖ –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!");
					break;

				case 'driver_edit_car_photo':
					if (!ctx.message.photo) {
						return ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –º–∞—à–∏–Ω—ã.");
					}
					session.data.carPhoto = ctx.message.photo.pop().file_id;
					await setDoc(doc(db, 'drivers', String(userId)), session.data, { merge: true });
					sessions.delete(userId);
					await ctx.reply("‚úÖ –§–æ—Ç–æ –º–∞—à–∏–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!");
					break;

				case 'driver_edit_description':
					session.data.description = ctx.message.text;
					await setDoc(doc(db, 'drivers', String(userId)), session.data, { merge: true });
					sessions.delete(userId);
					await ctx.reply("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!");
					break;

				default:
					sessions.delete(userId);
					await ctx.reply("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.");
					break;
			}
		} catch (error) {
			console.error("–û—à–∏–±–∫–∞:", error);
			await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
		}
	});

	// –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç—ã
	bot.callbackQuery("driver_view_profile", async (ctx) => {
		await ctx.answerCallbackQuery();
		const userId = ctx.from.id;
		const driverRef = doc(db, "drivers", String(userId));
		const driverDoc = await getDoc(driverRef);

		if (!driverDoc.exists()) {
			return ctx.reply("–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—å.");
		}

		const driverData = driverDoc.data();

		if (driverData.carPhoto) {
			await ctx.replyWithPhoto(
				driverData.carPhoto,
				{
					caption: profileTextGen(driverData),
					parse_mode: "HTML",
				}
			);
		} else {
			await ctx.reply(
				profileTextGen(driverData),
				{
					parse_mode: "HTML",
				}
			);
		}
	});

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–µ–≤–æ–∑–∫–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö
	bot.callbackQuery(/pets_(yes|no)/, async (ctx) => {
		await ctx.answerCallbackQuery();
		const userId = ctx.from.id;
		const session = sessions.get(userId);

		if (!session || session.step !== 'driver_create_pets') {
			return ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.");
		}

		session.data.petsAllowed = ctx.match[1] === 'yes';
		session.step = 'driver_create_phone';
		sessions.set(userId, session);

		await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:");
	});
}
